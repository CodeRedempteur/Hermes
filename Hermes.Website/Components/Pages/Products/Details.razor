@page "/details/{id}"
@using Hermes.Website.Services
@using Hermes.Data.Product.Models
@using Hermes.Website.Components.Service
@inject ProductService ProductService
@inject IProductImageService ProductImageService
@inject IImageService ImageService
@inject ICartService CartService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>@(product?.Nom ?? "Détails Produit") - Eternal Bears</PageTitle>

<div class="product-details-container">
    @if (isLoading)
    {
        <!-- Loading State -->
        <div class="loading-container">
            <div class="loading-spinner">
                <i class="fas fa-spinner fa-spin"></i>
                <span>Chargement du produit...</span>
            </div>
        </div>
    }
    else if (product == null)
    {
        <!-- Product Not Found -->
        <div class="not-found-container">
            <div class="not-found-content">
                <div class="not-found-icon">
                    <i class="fas fa-exclamation-triangle"></i>
                </div>
                <h2>Produit introuvable</h2>
                <p>Le produit que vous recherchez n'existe pas ou a été supprimé.</p>
                <button class="btn btn-primary" @onclick="GoBack">
                    <i class="fas fa-arrow-left"></i>
                    Retour aux produits
                </button>
            </div>
        </div>
    }
    else
    {
        <!-- Product Details -->
        <div class="product-details-content">

            <!-- Breadcrumb -->
            <nav class="breadcrumb">
                <button class="breadcrumb-item" @onclick="GoBack">
                    <i class="fas fa-arrow-left"></i>
                    Retour aux produits
                </button>
                <span class="breadcrumb-separator">/</span>
                <span class="breadcrumb-current">@product.Nom</span>
            </nav>

            <!-- Product Main Content -->
            <div class="product-main">

                <!-- Product Image Gallery -->
                <div class="product-gallery">
                    <!-- Image principale -->
                    <div class="main-image">
                        @if (!string.IsNullOrEmpty(GetCurrentImageSrc()))
                        {
                            <img src="@GetCurrentImageSrc()"
                                 alt="@product.Nom"
                                 class="product-image"
                                 @onload="OnImageLoad"
                                 @onerror="OnImageError"
                                 style="@(hasImageError ? "display: none;" : "")" />
                        }

                        <!-- Fallback Image -->
                        <div class="image-fallback @(ShouldShowFallback() ? "show" : "")">
                            <i class="fas fa-image"></i>
                            <span>Image non disponible</span>
                        </div>

                        <!-- Image Zoom Button -->
                        @if (!string.IsNullOrEmpty(GetCurrentImageSrc()) && !hasImageError)
                        {
                            <button class="zoom-btn" @onclick="OpenImageModal" title="Agrandir l'image">
                                <i class="fas fa-search-plus"></i>
                            </button>
                        }

                        <!-- Navigation arrows pour plusieurs images -->
                        @if (productImages.Count > 1)
                        {
                            <button class="gallery-nav prev" @onclick="PreviousImage" title="Image précédente">
                                <i class="fas fa-chevron-left"></i>
                            </button>
                            <button class="gallery-nav next" @onclick="NextImage" title="Image suivante">
                                <i class="fas fa-chevron-right"></i>
                            </button>
                        }

                        <!-- Indicateur d'images -->
                        @if (productImages.Count > 1)
                        {
                            <div class="image-counter">
                                @(currentImageIndex + 1) / @productImages.Count
                            </div>
                        }
                    </div>

                    <!-- Miniatures -->
                    @if (productImages.Count > 1)
                    {
                        <div class="thumbnails-container">
                            <div class="thumbnails-grid">
                                @for (int i = 0; i < productImages.Count; i++)
                                {
                                    var index = i;
                                    <div class="thumbnail @(currentImageIndex == index ? "active" : "")"
                                         @onclick="() => SelectImage(index)">
                                        <img src="@GetImageDisplayUrl(productImages[index])"
                                             alt="Image @(index + 1)"
                                             loading="lazy" />

                                        <!-- Badge pour identifier le type d'image -->
                                        @if (IsUrl(productImages[index].ImageBase64))
                                        {
                                            <div class="image-type-badge">
                                                <i class="fas fa-link"></i>
                                            </div>
                                        }
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>

                <!-- Product Information -->
                <div class="product-info">

                    <!-- Product Header -->
                    <div class="product-header">
                        <div class="product-category">@GetCategoryDisplayName()</div>
                        <h1 class="product-title">@product.Nom</h1>

                        <!-- Product Badges -->
                        <div class="product-badges">
                            @if (IsNewProduct(product.CreatedAt))
                            {
                                <span class="product-badge new">Nouveau</span>
                            }
                            @if (IsLimitedEdition(product.Id))
                            {
                                <span class="product-badge limited">Édition limitée</span>
                            }
                            @if (!product.IsPublished)
                            {
                                <span class="product-badge unavailable">Épuisé</span>
                            }
                        </div>
                    </div>

                    <!-- Product Price -->
                    <div class="product-pricing">
                        <div class="current-price">@product.Prix.ToString("F0")€</div>
                        <div class="price-info">Prix TTC, livraison en sus</div>
                    </div>

                    <!-- Product Description -->
                    <div class="product-description">
                        <h3>Description</h3>
                        <p>@(string.IsNullOrEmpty(product.Description) ? "Description détaillée à venir pour cet adorable ours en peluche." : product.Description)</p>
                    </div>

                    <!-- Product Actions -->
                    <div class="product-actions">
                        @if (product.IsPublished)
                        {
                            <button class="btn btn-primary btn-large @(isAddingToCart ? "loading" : "")"
                                    @onclick="AddToCart"
                                    disabled="@isAddingToCart">
                                @if (isAddingToCart)
                                {
                                    <i class="fas fa-spinner fa-spin"></i>
                                    <span>Ajout en cours...</span>
                                }
                                else
                                {
                                    <i class="fas fa-shopping-cart"></i>
                                    <span>Ajouter au panier</span>
                                }
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-disabled btn-large" disabled>
                                <i class="fas fa-times"></i>
                                Produit épuisé
                            </button>
                        }

                        <button class="btn btn-secondary" @onclick="AddToFavorites">
                            <i class="fas fa-heart"></i>
                            Ajouter aux favoris
                        </button>

                        <!-- Message de feedback pour l'ajout au panier -->
                        @if (!string.IsNullOrEmpty(cartMessage))
                        {
                            <div class="cart-feedback @(cartMessage.Contains("succès") ? "success" : "error")">
                                <i class="fas @(cartMessage.Contains("succès") ? "fa-check-circle" : "fa-exclamation-circle")"></i>
                                <span>@cartMessage</span>
                            </div>
                        }
                    </div>

                    <!-- Product Meta Information -->
                    <div class="product-meta">
                        <div class="meta-item">
                            <span class="meta-label">Statut :</span>
                            <span class="meta-value @(product.IsPublished ? "available" : "unavailable")">
                                @(product.IsPublished ? "Disponible" : "Non publié")
                            </span>
                        </div>
                        <div class="meta-item">
                            <span class="meta-label">Ajouté le :</span>
                            <span class="meta-value">@product.CreatedAt.ToString("dd MMMM yyyy", new System.Globalization.CultureInfo("fr-FR"))</span>
                        </div>
                        <div class="meta-item">
                            <span class="meta-label">Référence :</span>
                            <span class="meta-value">EB-@product.Id.ToString("D4")</span>
                        </div>
                        @if (productImages.Count > 0)
                        {
                            <div class="meta-item">
                                <span class="meta-label">Images :</span>
                                <span class="meta-value">@productImages.Count image@(productImages.Count > 1 ? "s" : "")</span>
                            </div>
                        }
                    </div>

                    <!-- Social Share -->
                    <div class="product-share">
                        <h4>Partager ce produit</h4>
                        <div class="share-buttons">
                            <button class="share-btn facebook" @onclick="ShareOnFacebook" title="Partager sur Facebook">
                                <i class="fab fa-facebook-f"></i>
                            </button>
                            <button class="share-btn twitter" @onclick="ShareOnTwitter" title="Partager sur Twitter">
                                <i class="fab fa-twitter"></i>
                            </button>
                            <button class="share-btn copy" @onclick="CopyLink" title="Copier le lien">
                                <i class="fas fa-link"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Image Modal -->
@if (showImageModal)
{
    <div class="image-modal" @onclick="CloseImageModal">
        <div class="modal-content" @onclick:stopPropagation="true">
            <button class="modal-close" @onclick="CloseImageModal">
                <i class="fas fa-times"></i>
            </button>

            <!-- Navigation dans le modal -->
            @if (productImages.Count > 1)
            {
                <button class="modal-nav prev" @onclick="PreviousImageModal" title="Image précédente">
                    <i class="fas fa-chevron-left"></i>
                </button>
                <button class="modal-nav next" @onclick="NextImageModal" title="Image suivante">
                    <i class="fas fa-chevron-right"></i>
                </button>
            }

            <img src="@GetCurrentImageSrc()" alt="@product?.Nom" class="modal-image" />

            <!-- Informations sur l'image dans le modal -->
            <div class="modal-image-info">
                <span>Image @(currentImageIndex + 1) de @productImages.Count</span>
                @if (productImages.Count > 0 && currentImageIndex < productImages.Count)
                {
                    <span class="image-type">
                        @(IsUrl(productImages[currentImageIndex].ImageBase64) ? "Image en ligne" : "Image uploadée")
                    </span>
                }
            </div>
        </div>
    </div>
}


@code {
    [Parameter]
    public string Id { get; set; } = "";

    private Product? product;
    private List<ImageProduct> productImages = new();
    private int currentImageIndex = 0;
    private bool isLoading = true;
    private bool hasImageError = false;
    private bool showImageModal = false;
    private bool isAddingToCart = false;
    private string cartMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadProduct();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            await LoadProduct();
        }
    }

    private async Task LoadProduct()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            if (int.TryParse(Id, out var productId))
            {
                product = await ProductService.GetProductByIdAsync(productId);

                if (product != null)
                {
                    await LoadProductImages();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors du chargement du produit {Id}: {ex.Message}");
            product = null;
        }

        isLoading = false;
        StateHasChanged();
    }

    private async Task LoadProductImages()
    {
        if (product == null) return;

        try
        {
            // Récupérer toutes les images du produit
            var images = await ProductImageService.GetProductImagesAsync(product.Id);
            productImages = images.ToList();

            Console.WriteLine($"Images trouvées pour le produit {product.Id}: {productImages.Count}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors du chargement des images: {ex.Message}");
            productImages = new List<ImageProduct>();
        }
    }

    // Méthodes de navigation d'images
    private void SelectImage(int index)
    {
        if (index >= 0 && index < productImages.Count)
        {
            currentImageIndex = index;
            hasImageError = false;
            StateHasChanged();
        }
    }

    private void PreviousImage()
    {
        currentImageIndex = currentImageIndex > 0 ? currentImageIndex - 1 : productImages.Count - 1;
        hasImageError = false;
        StateHasChanged();
    }

    private void NextImage()
    {
        currentImageIndex = currentImageIndex < productImages.Count - 1 ? currentImageIndex + 1 : 0;
        hasImageError = false;
        StateHasChanged();
    }

    private void PreviousImageModal()
    {
        PreviousImage();
    }

    private void NextImageModal()
    {
        NextImage();
    }

    // Méthodes d'affichage des images
    private string GetCurrentImageSrc()
    {
        if (productImages.Count == 0 || currentImageIndex >= productImages.Count)
            return string.Empty;

        return GetImageDisplayUrl(productImages[currentImageIndex]);
    }

    private string GetImageDisplayUrl(ImageProduct image)
    {
        if (image?.ImageBase64 == null) return string.Empty;

        return ImageService.GetDisplayUrl(image.ImageBase64);
    }

    private bool IsUrl(string? imageData)
    {
        return ImageService.IsUrl(imageData ?? string.Empty);
    }

    private bool ShouldShowFallback()
    {
        return string.IsNullOrEmpty(GetCurrentImageSrc()) || hasImageError;
    }

    private void OnImageLoad()
    {
        hasImageError = false;
        StateHasChanged();
    }

    private void OnImageError()
    {
        hasImageError = true;
        StateHasChanged();
    }

    private string GetCategoryDisplayName()
    {
        return "Ours en peluche"; // TODO: Implémenter selon votre logique de catégories
    }

    private bool IsNewProduct(DateTime createdAt)
    {
        return (DateTime.Now - createdAt).TotalDays <= 30;
    }

    private bool IsLimitedEdition(int productId)
    {
        return productId <= 10; // TODO: Adapter selon votre logique
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }

    private async Task AddToCart()
    {
        if (product != null && product.IsPublished && !isAddingToCart)
        {
            try
            {
                isAddingToCart = true;
                cartMessage = string.Empty;
                StateHasChanged();

                // Appel simplifié - plus besoin de passer les détails du produit
                await CartService.AddToCartAsync(product.Id);

                cartMessage = "Produit ajouté au panier avec succès !";

                // Faire disparaître le message après 3 secondes
                _ = Task.Run(async () =>
                {
                    await Task.Delay(3000);
                    await InvokeAsync(() =>
                    {
                        cartMessage = string.Empty;
                        StateHasChanged();
                    });
                });
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erreur lors de l'ajout au panier: {ex.Message}");
                cartMessage = "Erreur lors de l'ajout au panier. Veuillez réessayer.";

                // Faire disparaître le message d'erreur après 3 secondes
                _ = Task.Run(async () =>
                {
                    await Task.Delay(3000);
                    await InvokeAsync(() =>
                    {
                        cartMessage = string.Empty;
                        StateHasChanged();
                    });
                });
            }
            finally
            {
                isAddingToCart = false;
                StateHasChanged();
            }
        }
    }

    private void AddToFavorites()
    {
        if (product != null)
        {
            Console.WriteLine($"Adding {product.Nom} to favorites");
            // TODO: Implémenter l'ajout aux favoris
        }
    }

    private void OpenImageModal()
    {
        showImageModal = true;
        StateHasChanged();
    }

    private void CloseImageModal()
    {
        showImageModal = false;
        StateHasChanged();
    }

    private async Task ShareOnFacebook()
    {
        var url = Navigation.Uri;
        var facebookUrl = $"https://www.facebook.com/sharer/sharer.php?u={Uri.EscapeDataString(url)}";
        await JSRuntime.InvokeVoidAsync("open", facebookUrl, "_blank");
    }

    private async Task ShareOnTwitter()
    {
        var url = Navigation.Uri;
        var text = $"Découvrez {product?.Nom} chez Eternal Bears !";
        var twitterUrl = $"https://twitter.com/intent/tweet?url={Uri.EscapeDataString(url)}&text={Uri.EscapeDataString(text)}";
        await JSRuntime.InvokeVoidAsync("open", twitterUrl, "_blank");
    }

    private async Task CopyLink()
    {
        var url = Navigation.Uri;
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", url);

        cartMessage = "Lien copié dans le presse-papiers !";

        // Faire disparaître le message après 2 secondes
        _ = Task.Run(async () =>
        {
            await Task.Delay(2000);
            await InvokeAsync(() =>
            {
                cartMessage = string.Empty;
                StateHasChanged();
            });
        });
    }
}