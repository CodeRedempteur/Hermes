@page "/admin/create-product"
@using Hermes.Website.Services
@using Hermes.Website.Components.Service
@using Hermes.Data.Product.Models
@inject ProductService ProductService
@inject IProductImageService ProductImageService
@inject IImageService ImageService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Créer un produit - Eternal Bears</PageTitle>

<div class="create-product-pro-container">
    <div class="container">
        <!-- Header avec progress -->
        <div class="product-creation-header">
            <div class="header-content">
                <h1>
                    <i class="fas fa-cube"></i>
                    Création de produit
                </h1>
                <p>Suivez les étapes pour créer votre nouveau produit Eternal Bears</p>
            </div>

            <!-- Progress Steps -->
            <div class="progress-steps">
                @for (int i = 0; i < steps.Count; i++)
                {
                    var step = steps[i];
                    var index = i;
                    <div class="step-item @(currentStep == index ? "active" : "") @(currentStep > index ? "completed" : "")">
                        <div class="step-circle">
                            @if (currentStep > index)
                            {
                                <i class="fas fa-check"></i>
                            }
                            else
                            {
                                <span>@(index + 1)</span>
                            }
                        </div>
                        <div class="step-label">
                            <span class="step-title">@step.Title</span>
                            <span class="step-description">@step.Description</span>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Messages d'erreur/succès -->
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">
                <i class="fas fa-exclamation-triangle"></i>
                @errorMessage
            </div>
        }

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success">
                <i class="fas fa-check-circle"></i>
                @successMessage
            </div>
        }

        <!-- Main Content Area -->
        <div class="creation-workspace">
            <!-- Sidebar Navigation -->
            <div class="steps-sidebar">
                <div class="sidebar-header">
                    <h3>Étapes de création</h3>
                    <div class="progress-indicator">
                        <span>@(currentStep + 1) / @steps.Count</span>
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: @(((float)(currentStep + 1) / steps.Count) * 100)%"></div>
                        </div>
                    </div>
                </div>

                <nav class="steps-nav">
                    @for (int i = 0; i < steps.Count; i++)
                    {
                        var step = steps[i];
                        var index = i;
                        <button type="button"
                                class="nav-step @(currentStep == index ? "active" : "") @(currentStep > index ? "completed" : "") @(index > currentStep ? "disabled" : "")"
                                @onclick="() => GoToStep(index)"
                                disabled="@(index > currentStep)">
                            <div class="nav-step-icon">
                                @if (currentStep > index)
                                {
                                    <i class="fas fa-check-circle"></i>
                                }
                                else
                                {
                                    <i class="@step.Icon"></i>
                                }
                            </div>
                            <div class="nav-step-content">
                                <span class="nav-step-title">@step.Title</span>
                                <span class="nav-step-desc">@step.Description</span>
                            </div>
                        </button>
                    }
                </nav>

                <!-- Quick Actions -->
                <div class="sidebar-actions">
                    <button type="button" class="btn btn-ghost" @onclick="SaveAsDraft" disabled="@isProcessing">
                        <i class="fas fa-save"></i>
                        Sauvegarder
                    </button>
                    <button type="button" class="btn btn-ghost" @onclick="PreviewProduct">
                        <i class="fas fa-eye"></i>
                        Aperçu
                    </button>
                </div>
            </div>

            <!-- Main Content -->
            <div class="main-content">
                <div class="step-container">
                    <!-- Step Content -->
                    @if (currentStep == 0)
                    {
                        <!-- Étape 1: Images -->
                        <div class="step-content step-images">
                            <div class="step-header">
                                <h2>
                                    <i class="fas fa-images"></i>
                                    Images du produit
                                </h2>
                                <p>Ajoutez des images haute qualité de votre création</p>
                            </div>

                            <div class="image-upload-pro">
                                @if (!selectedImages.Any())
                                {
                                    <div class="upload-zone" @ondragover:preventDefault="true" @ondrop:preventDefault="true">
                                        <div class="upload-icon">
                                            <i class="fas fa-cloud-upload-alt"></i>
                                        </div>
                                        <h3>Glissez vos images ici</h3>
                                        <p>ou cliquez pour sélectionner des fichiers</p>
                                        <div class="upload-specs">
                                            <span><i class="fas fa-check"></i> JPG, PNG, WebP</span>
                                            <span><i class="fas fa-check"></i> Max 10MB par image</span>
                                            <span><i class="fas fa-check"></i> Jusqu'à 8 images</span>
                                        </div>
                                        <InputFile OnChange="@HandleImageSelection"
                                                   multiple
                                                   accept="image/*"
                                                   class="file-input"
                                                   id="imageInput" />
                                        <label for="imageInput" class="btn btn-primary btn-lg">
                                            <i class="fas fa-plus"></i>
                                            Sélectionner les images
                                        </label>
                                    </div>
                                }
                                else
                                {
                                    <div class="images-manager">
                                        <div class="images-grid">
                                            @for (int i = 0; i < selectedImages.Count; i++)
                                            {
                                                var index = i;
                                                <div class="image-card @(index == 0 ? "primary" : "")">
                                                    <div class="image-preview">
                                                        <img src="@GetImageDisplayUrl(selectedImages[index])" alt="Image @(index + 1)" />

                                                        <!-- Badge pour les URLs -->
                                                        @if (selectedImages[index].IsUrl)
                                                        {
                                                            <div class="url-badge">
                                                                <i class="fas fa-link"></i>
                                                                URL
                                                            </div>
                                                        }

                                                        <div class="image-overlay">
                                                            <div class="image-actions">
                                                                @if (index != 0)
                                                                {
                                                                    <button type="button" class="btn-icon btn-primary" @onclick="() => SetAsPrimary(index)" title="Image principale">
                                                                        <i class="fas fa-star"></i>
                                                                    </button>
                                                                }
                                                                <button type="button" class="btn-icon btn-danger" @onclick="() => RemoveImage(index)" title="Supprimer">
                                                                    <i class="fas fa-trash"></i>
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>

                                                    @if (index == 0)
                                                    {
                                                        <div class="primary-badge">
                                                            <i class="fas fa-crown"></i>
                                                            Image principale
                                                        </div>
                                                    }

                                                    <!-- Infos sur l'image -->
                                                    <div class="image-info">
                                                        @if (selectedImages[index].IsUrl)
                                                        {
                                                            <small class="text-muted">
                                                                <i class="fas fa-link"></i> URL: @selectedImages[index].FileName
                                                            </small>
                                                        }
                                                        else
                                                        {
                                                            <small class="text-muted">
                                                                <i class="fas fa-file"></i> @selectedImages[index].FileName
                                                                (@((selectedImages[index].FileSize / 1024).ToString("F0")) KB)
                                                            </small>
                                                        }
                                                    </div>
                                                </div>
                                            }

                                            @if (selectedImages.Count < 8)
                                            {
                                                <div class="add-more-card">
                                                    <InputFile OnChange="@HandleImageSelection"
                                                               multiple
                                                               accept="image/*"
                                                               class="file-input"
                                                               id="moreImages" />
                                                    <label for="moreImages" class="add-more-content">
                                                        <i class="fas fa-plus"></i>
                                                        <span>Ajouter plus</span>
                                                    </label>
                                                </div>
                                            }
                                        </div>

                                        <div class="images-info">
                                            <div class="info-card">
                                                <i class="fas fa-info-circle"></i>
                                                <div>
                                                    <strong>@selectedImages.Count / 8 images</strong>
                                                    <p>La première image sera utilisée comme image principale</p>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }

                                <!-- Section pour ajouter des URLs d'images -->
                                <div class="url-input-section">
                                    <h4><i class="fas fa-link"></i> Ou ajouter une URL d'image</h4>
                                    <div class="url-input-group">
                                        <input type="url" @bind="imageUrlInput" placeholder="https://exemple.com/image.jpg" class="form-control" />
                                        <button type="button" class="btn btn-outline" @onclick="AddImageUrlHandler" disabled="@(selectedImages.Count >= 8)">
                                            <i class="fas fa-plus"></i>
                                            Ajouter URL
                                        </button>
                                    </div>
                                    <div class="field-hint">
                                        <i class="fas fa-info-circle"></i>
                                        Vous pouvez ajouter des images via URL ou télécharger des fichiers
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    else if (currentStep == 1)
                    {
                        <!-- Étape 2: Informations de base -->
                        <div class="step-content step-info">
                            <div class="step-header">
                                <h2>
                                    <i class="fas fa-info-circle"></i>
                                    Informations générales
                                </h2>
                                <p>Décrivez votre produit en détail</p>
                            </div>

                            <div class="info-form">
                                <div class="form-row">
                                    <div class="form-group">
                                        <label for="productName" class="required">Nom du produit</label>
                                        <input type="text" id="productName" class="form-control @(string.IsNullOrWhiteSpace(productName) ? "error" : "")"
                                               @bind="productName" placeholder="Ex: Ours Tribal Édition Limitée" />
                                        <div class="field-hint">Choisissez un nom accrocheur et descriptif</div>
                                        @if (string.IsNullOrWhiteSpace(productName))
                                        {
                                            <div class="field-error">Le nom du produit est requis</div>
                                        }
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label for="description" class="required">Description</label>
                                    <div class="textarea-wrapper">
                                        <textarea id="description" class="form-control @(string.IsNullOrWhiteSpace(productDescription) ? "error" : "")"
                                                  @bind="productDescription"
                                                  placeholder="Décrivez votre produit, ses caractéristiques uniques, son processus de création..."
                                                  rows="6" maxlength="800"></textarea>
                                        <div class="textarea-footer">
                                            <div class="char-count">@(productDescription?.Length ?? 0) / 800 caractères</div>
                                            <div class="writing-tips">
                                                <i class="fas fa-lightbulb"></i>
                                                <span>Mentionnez les matériaux, finitions, et points forts</span>
                                            </div>
                                        </div>
                                    </div>
                                    @if (string.IsNullOrWhiteSpace(productDescription))
                                    {
                                        <div class="field-error">La description du produit est requise</div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                    else if (currentStep == 2)
                    {
                        <!-- Étape 3: Prix et disponibilité -->
                        <div class="step-content step-pricing">
                            <div class="step-header">
                                <h2>
                                    <i class="fas fa-euro-sign"></i>
                                    Prix et disponibilité
                                </h2>
                                <p>Définissez le prix et la gestion des stocks</p>
                            </div>

                            <div class="pricing-form">
                                <div class="pricing-main">
                                    <div class="price-input-group">
                                        <label for="price" class="required">Prix de vente</label>
                                        <div class="price-input-wrapper">
                                            <input type="number" id="price" class="form-control price-input @((!productPrice.HasValue || productPrice <= 0) ? "error" : "")"
                                                   @bind="productPrice" placeholder="0.00" step="0.01" min="0" />
                                            <span class="currency">€</span>
                                        </div>
                                        @if (!productPrice.HasValue || productPrice <= 0)
                                        {
                                            <div class="field-error">Le prix doit être supérieur à 0</div>
                                        }
                                    </div>

                                    <div class="availability-toggle">
                                        <label class="toggle-switch">
                                            <input type="checkbox" @bind="isPublished" />
                                            <span class="toggle-slider"></span>
                                            <span class="toggle-label">Publier le produit immédiatement</span>
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    else if (currentStep == 3)
                    {
                        <!-- Étape 4: Révision finale -->
                        <div class="step-content step-review">
                            <div class="step-header">
                                <h2>
                                    <i class="fas fa-check-circle"></i>
                                    Révision finale
                                </h2>
                                <p>Vérifiez toutes les informations avant publication</p>
                            </div>

                            <div class="review-content">
                                <div class="product-preview">
                                    <div class="preview-images">
                                        @if (selectedImages.Any())
                                        {
                                            <div class="main-image">
                                                <img src="@GetImageDisplayUrl(selectedImages[0])" alt="@productName" />
                                                @if (selectedImages[0].IsUrl)
                                                {
                                                    <div class="image-type-badge">URL</div>
                                                }
                                            </div>
                                            @if (selectedImages.Count > 1)
                                            {
                                                <div class="thumbnail-list">
                                                    @for (int i = 1; i < Math.Min(selectedImages.Count, 4); i++)
                                                    {
                                                        <img src="@GetImageDisplayUrl(selectedImages[i])" alt="Image @(i + 1)" />
                                                    }
                                                    @if (selectedImages.Count > 4)
                                                    {
                                                        <div class="more-images">+@(selectedImages.Count - 4)</div>
                                                    }
                                                </div>
                                            }
                                        }
                                        else
                                        {
                                            <div class="no-image-placeholder">
                                                <i class="fas fa-image"></i>
                                                <span>Aucune image</span>
                                            </div>
                                        }
                                    </div>

                                    <div class="preview-info">
                                        <h3>@(productName ?? "Nom du produit")</h3>
                                        <div class="preview-price">@(productPrice?.ToString("F2") ?? "0.00")€</div>
                                        <p class="preview-description">@(productDescription ?? "Aucune description")</p>
                                        <div class="preview-status">
                                            <span class="status-badge @(isPublished ? "published" : "draft")">
                                                @(isPublished ? "Publié" : "Brouillon")
                                            </span>
                                        </div>
                                    </div>
                                </div>

                                <div class="review-sections">
                                    <div class="review-section">
                                        <h4><i class="fas fa-info-circle"></i> Informations</h4>
                                        <div class="review-grid">
                                            <div class="review-item">
                                                <span>Nom:</span>
                                                <strong>@(productName ?? "Non défini")</strong>
                                            </div>
                                            <div class="review-item">
                                                <span>Description:</span>
                                                <strong>@(string.IsNullOrEmpty(productDescription) ? "Non définie" : "✓ Définie")</strong>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="review-section">
                                        <h4><i class="fas fa-euro-sign"></i> Prix et publication</h4>
                                        <div class="review-grid">
                                            <div class="review-item">
                                                <span>Prix:</span>
                                                <strong>@(productPrice?.ToString("F2") ?? "0.00")€</strong>
                                            </div>
                                            <div class="review-item">
                                                <span>Statut:</span>
                                                <strong class="@(isPublished ? "text-success" : "text-warning")">
                                                    @(isPublished ? "Sera publié" : "Restera en brouillon")
                                                </strong>
                                            </div>
                                            <div class="review-item">
                                                <span>Images:</span>
                                                <strong>@selectedImages.Count image(s)</strong>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <!-- Navigation Footer -->
                <div class="step-navigation">
                    <div class="nav-left">
                        @if (currentStep > 0)
                        {
                            <button type="button" class="btn btn-outline" @onclick="PreviousStep" disabled="@isProcessing">
                                <i class="fas fa-arrow-left"></i>
                                Précédent
                            </button>
                        }
                    </div>

                    <div class="nav-center">
                        <div class="step-indicator">
                            Étape @(currentStep + 1) sur @steps.Count
                        </div>
                    </div>

                    <div class="nav-right">
                        @if (currentStep < steps.Count - 1)
                        {
                            <button type="button" class="btn btn-primary" @onclick="NextStep" disabled="@(!CanProceedToNext() || isProcessing)">
                                Suivant
                                <i class="fas fa-arrow-right"></i>
                            </button>
                        }
                        else
                        {
                            <button type="button" class="btn btn-success btn-lg" @onclick="HandleSubmit" disabled="@(!CanSubmit() || isProcessing)">
                                @if (isProcessing)
                                {
                                    <div class="spinner"></div>
                                    <span>Création...</span>
                                }
                                else
                                {
                                    <i class="fas fa-rocket"></i>
                                    <span>Créer le produit</span>
                                }
                            </button>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



@code {
    // Utiliser le type ClientProductImage pour éviter les conflits

    // Étapes du processus
    private List<CreationStep> steps = new()
    {
        new("Images", "Ajoutez vos photos", "fas fa-images"),
        new("Informations", "Détails du produit", "fas fa-info-circle"),
        new("Prix", "Tarification", "fas fa-euro-sign"),
        new("Révision", "Validation finale", "fas fa-check-circle")
    };

private int currentStep = 0;

// Variables du produit
private string productName = string.Empty;
private string productDescription = string.Empty;
private decimal? productPrice;
private bool isPublished = false;
private List<ClientProductImage> selectedImages = new();
private bool isProcessing = false;

// Variable pour l'input d'URL
private string imageUrlInput = string.Empty;

// Messages
private string? errorMessage;
private string? successMessage;

public class CreationStep
{
    public string Title { get; set; }
    public string Description { get; set; }
    public string Icon { get; set; }

    public CreationStep(string title, string description, string icon)
    {
        Title = title;
        Description = description;
        Icon = icon;
    }
}

// ===== MÉTHODES DE NAVIGATION =====

private void NextStep()
{
    if (currentStep < steps.Count - 1 && CanProceedToNext())
    {
        currentStep++;
        ClearMessages();
    }
}

private void PreviousStep()
{
    if (currentStep > 0)
    {
        currentStep--;
        ClearMessages();
    }
}

private void GoToStep(int stepIndex)
{
    if (stepIndex <= currentStep)
    {
        currentStep = stepIndex;
        ClearMessages();
    }
}

private bool CanProceedToNext()
{
    return currentStep switch
    {
        0 => true, // Images optionnelles
        1 => !string.IsNullOrWhiteSpace(productName) && !string.IsNullOrWhiteSpace(productDescription),
        2 => productPrice.HasValue && productPrice > 0,
        _ => true
    };
}

private bool CanSubmit()
{
    return !string.IsNullOrWhiteSpace(productName) &&
           !string.IsNullOrWhiteSpace(productDescription) &&
           productPrice.HasValue &&
           productPrice > 0;
}

// ===== MÉTHODES POUR LES IMAGES =====

/// <summary>
/// Gère la sélection de fichiers images
/// </summary>
private async Task HandleImageSelection(InputFileChangeEventArgs e)
{
    var files = e.GetMultipleFiles(8 - selectedImages.Count);

    foreach (var file in files)
    {
        // Vérifier la taille (max 10MB)
        if (file.Size > 10 * 1024 * 1024)
        {
            errorMessage = $"Fichier {file.Name} trop volumineux (max 10MB)";
            continue;
        }

        // Vérifier le type de fichier
        if (!file.ContentType.StartsWith("image/"))
        {
            errorMessage = $"Fichier {file.Name} n'est pas une image";
            continue;
        }

        try
        {
            // Utiliser le service d'image pour convertir
            var base64Data = await ImageService.ConvertFileToBase64Async(file, 10 * 1024 * 1024);
            var dataUrl = ImageService.GetImageDataUrl(base64Data);

            selectedImages.Add(new ClientProductImage
            {
                DataUrl = dataUrl,
                Base64Data = base64Data,
                FileName = file.Name,
                FileSize = file.Size,
                IsPrimary = selectedImages.Count == 0 // La première image est principale
            });

            ClearMessages();
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur lors du traitement de {file.Name}: {ex.Message}";
        }
    }

    StateHasChanged();
}

/// <summary>
/// Ajoute une image via URL
/// </summary>
private void AddImageUrlHandler()
{
    if (string.IsNullOrWhiteSpace(imageUrlInput))
    {
        errorMessage = "Veuillez saisir une URL d'image";
        return;
    }

    // Valider l'URL
    if (!Uri.TryCreate(imageUrlInput.Trim(), UriKind.Absolute, out Uri? uri) ||
        (uri.Scheme != "http" && uri.Scheme != "https"))
    {
        errorMessage = "Format d'URL invalide. Utilisez http:// ou https://";
        return;
    }

    // Vérifier si on a encore de la place
    if (selectedImages.Count >= 8)
    {
        errorMessage = "Maximum 8 images autorisées";
        return;
    }

    try
    {
        selectedImages.Add(new ClientProductImage
        {
            DataUrl = imageUrlInput.Trim(), // Pour l'affichage
            Base64Data = imageUrlInput.Trim(), // Stocké tel quel (URL)
            FileName = Path.GetFileName(uri.LocalPath) ?? "image-url",
            FileSize = 0,
            IsPrimary = selectedImages.Count == 0
        });

        // Nettoyer l'input
        imageUrlInput = string.Empty;
        ClearMessages();
        StateHasChanged();
    }
    catch (Exception ex)
    {
        errorMessage = $"Erreur lors de l'ajout de l'URL: {ex.Message}";
    }
}

/// <summary>
/// Retourne l'URL d'affichage pour une image
/// </summary>
private string GetImageDisplayUrl(ClientProductImage image)
{
    return ImageService.GetDisplayUrl(image.Base64Data);
}

/// <summary>
/// Supprime une image de la liste
/// </summary>
private void RemoveImage(int index)
{
    if (index >= 0 && index < selectedImages.Count)
    {
        selectedImages.RemoveAt(index);
        StateHasChanged();
    }
}

/// <summary>
/// Définit une image comme image principale
/// </summary>
private void SetAsPrimary(int index)
{
    if (index > 0 && index < selectedImages.Count)
    {
        // Retirer le flag de toutes les images
        foreach (var img in selectedImages)
        {
            img.IsPrimary = false;
        }

        // Déplacer l'image sélectionnée en première position
        var image = selectedImages[index];
        selectedImages.RemoveAt(index);
        selectedImages.Insert(0, image);

        // Marquer la première image comme principale
        selectedImages[0].IsPrimary = true;

        StateHasChanged();
    }
}

// ===== MÉTHODES DE SOUMISSION =====

/// <summary>
/// Méthode principale de soumission du produit
/// </summary>
private async Task HandleSubmit()
{
    if (!CanSubmit())
    {
        errorMessage = "Veuillez remplir tous les champs requis";
        return;
    }

    isProcessing = true;
    ClearMessages();
    StateHasChanged();

    try
    {
        // 1. Créer le produit d'abord
        var productDto = new ProductCreateDto
        {
            Nom = productName.Trim(),
            Description = productDescription.Trim(),
            Prix = productPrice!.Value,
            IsPublished = isPublished,
            ImageId = null, // Sera défini après la création de l'image
            PlastiqueId = null,
            CategorieId = null,
            TagId = null,
            StockId = null,
            SeoId = null
        };

        Console.WriteLine($"=== CRÉATION PRODUIT ===");
        Console.WriteLine($"Nom: {productDto.Nom}");
        Console.WriteLine($"Prix: {productDto.Prix}");
        Console.WriteLine($"Images à créer: {selectedImages.Count}");

        var createdProduct = await ProductService.CreateProductAsync(productDto);

        if (createdProduct != null)
        {
            Console.WriteLine($"Produit créé avec ID: {createdProduct.Id}");

            // 2. Créer les images si il y en a
            if (selectedImages.Any())
            {
                Console.WriteLine("=== CRÉATION IMAGES ===");
                var createdImages = await ProductImageService.CreateMultipleImagesAsync(selectedImages, createdProduct.Id);

                if (createdImages.Any())
                {
                    Console.WriteLine($"Images créées: {createdImages.Length}");

                    // 3. Définir la première image comme image principale du produit
                    var primaryImage = createdImages.First();
                    Console.WriteLine($"Définition image principale: {primaryImage.Id}");

                    var updateSuccess = await UpdateProductMainImage(createdProduct.Id, primaryImage.Id);
                    Console.WriteLine($"Mise à jour image principale: {updateSuccess}");
                }
            }

            successMessage = $"Produit '{createdProduct.Nom}' créé avec succès !";

            // Rediriger vers la liste des produits après un délai
            await Task.Delay(2000);
            Navigation.NavigateTo("/");
        }
        else
        {
            errorMessage = "Erreur lors de la création du produit. Veuillez réessayer.";
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"ERREUR CRÉATION PRODUIT: {ex.Message}");
        Console.WriteLine($"Stack trace: {ex.StackTrace}");
        errorMessage = $"Erreur: {ex.Message}";
    }
    finally
    {
        isProcessing = false;
        StateHasChanged();
    }
}

/// <summary>
/// Met à jour l'image principale du produit
/// </summary>
private async Task<bool> UpdateProductMainImage(int productId, int imageId)
{
    try
    {
        var productDto = new ProductCreateDto
        {
            Nom = productName.Trim(),
            Description = productDescription.Trim(),
            Prix = productPrice!.Value,
            IsPublished = isPublished,
            ImageId = imageId, // Définir l'image principale
            PlastiqueId = null,
            CategorieId = null,
            TagId = null,
            StockId = null,
            SeoId = null
        };

        return await ProductService.UpdateProductAsync(productId, productDto);
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Erreur lors de la mise à jour de l'image principale: {ex.Message}");
        return false;
    }
}

/// <summary>
/// Sauvegarde le produit comme brouillon
/// </summary>
private async Task SaveAsDraft()
{
    if (string.IsNullOrWhiteSpace(productName))
    {
        errorMessage = "Le nom du produit est requis pour sauvegarder";
        return;
    }

    isProcessing = true;
    ClearMessages();
    StateHasChanged();

    try
    {
        // 1. Créer le produit en brouillon
        var productDto = new ProductCreateDto
        {
            Nom = productName.Trim(),
            Description = productDescription?.Trim() ?? "",
            Prix = productPrice ?? 0,
            IsPublished = false, // Forcer en brouillon
            ImageId = null,
            PlastiqueId = null,
            CategorieId = null,
            TagId = null,
            StockId = null,
            SeoId = null
        };

        var createdProduct = await ProductService.CreateProductAsync(productDto);

        if (createdProduct != null)
        {
            // 2. Sauvegarder les images si il y en a
            if (selectedImages.Any())
            {
                var createdImages = await ProductImageService.CreateMultipleImagesAsync(selectedImages, createdProduct.Id);

                if (createdImages.Any())
                {
                    // 3. Définir la première image comme image principale
                    var primaryImage = createdImages.First();
                    await UpdateProductMainImage(createdProduct.Id, primaryImage.Id);
                }
            }

            successMessage = "Brouillon sauvegardé avec succès !";
        }
        else
        {
            errorMessage = "Erreur lors de la sauvegarde du brouillon";
        }
    }
    catch (Exception ex)
    {
        errorMessage = $"Erreur: {ex.Message}";
    }
    finally
    {
        isProcessing = false;
        StateHasChanged();
    }
}

/// <summary>
/// Affiche un aperçu du produit dans la console
/// </summary>
private async Task PreviewProduct()
{
    await JSRuntime.InvokeVoidAsync("console.log", "=== APERÇU DU PRODUIT ===");
    await JSRuntime.InvokeVoidAsync("console.log", "Informations:", new
    {
        Name = productName,
        Description = productDescription,
        Price = productPrice,
        IsPublished = isPublished,
        ImagesCount = selectedImages.Count
    });

    await JSRuntime.InvokeVoidAsync("console.log", "Images:", selectedImages.Select(img => new
    {
        IsUrl = img.IsUrl,
        FileName = img.FileName,
        FileSize = img.FileSize,
        IsPrimary = img.IsPrimary
    }).ToArray());
}

// ===== MÉTHODES UTILITAIRES =====

/// <summary>
/// Efface les messages d'erreur et de succès
/// </summary>
private void ClearMessages()
{
    errorMessage = null;
    successMessage = null;
}

/// <summary>
/// Valide une URL d'image (méthode optionnelle pour validation avancée)
/// </summary>
private async Task ValidateImageUrl(string url)
{
    try
    {
        using var httpClient = new HttpClient();
        httpClient.Timeout = TimeSpan.FromSeconds(5);

        var response = await httpClient.GetAsync(url, HttpCompletionOption.ResponseHeadersRead);

        if (!response.IsSuccessStatusCode)
        {
            errorMessage = "L'URL d'image n'est pas accessible";
            return;
        }

        var contentType = response.Content.Headers.ContentType?.MediaType;
        if (contentType == null || !contentType.StartsWith("image/"))
        {
            errorMessage = "L'URL ne pointe pas vers une image valide";
            return;
        }

        // Si on arrive ici, l'URL est valide
        successMessage = "URL d'image validée avec succès ✓";
        StateHasChanged();

        // Effacer le message après 2 secondes
        await Task.Delay(2000);
        successMessage = null;
        StateHasChanged();
    }
    catch (Exception ex)
    {
        errorMessage = $"Impossible de valider l'URL: {ex.Message}";
    }
}

/// <summary>
/// Méthode pour prévisualiser une URL avant ajout (appelable depuis l'interface)
/// </summary>
private async Task PreviewUrlImage()
{
    if (string.IsNullOrWhiteSpace(imageUrlInput)) return;

    try
    {
        await ValidateImageUrl(imageUrlInput.Trim());
    }
    catch (Exception ex)
    {
        errorMessage = $"Erreur de prévisualisation: {ex.Message}";
    }
}

/// <summary>
/// Réinitialise le formulaire
/// </summary>
private void ResetForm()
{
    productName = string.Empty;
    productDescription = string.Empty;
    productPrice = null;
    isPublished = false;
    selectedImages.Clear();
    imageUrlInput = string.Empty;
    currentStep = 0;
    ClearMessages();
    StateHasChanged();
}

/// <summary>
/// Calcule le pourcentage de completion du formulaire
/// </summary>
private int GetCompletionPercentage()
{
    var completed = 0;
    var total = 4;

    if (selectedImages.Any()) completed++;
    if (!string.IsNullOrWhiteSpace(productName)) completed++;
    if (!string.IsNullOrWhiteSpace(productDescription)) completed++;
    if (productPrice.HasValue && productPrice > 0) completed++;

    return (int)((float)completed / total * 100);
}
}